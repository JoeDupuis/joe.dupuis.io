---
title: Projects
layout: projects
---

# Projects

A big chunk of what I worked on over the years was under white label. Some projects could be too small or unsignificant, I don't mention server I manage for clients for example. The list could also be outdated. Therefore this is far from being an exaustive list. More like a wall of honorable mentions

Most of the open source projects are old (when I was starting out). Therefore some of the code doesn't represent my current style or the level of quality. Nevertheless they collectively helped sharpen my skills and help showcase the broad range of problems I worked on over the years.

The more recent projects (in no particular order) are the [web development projects](#web-development)

The [games and tool](#games-and-tool) were done between college and 2013.

## Web development

### MyVibe

<https://www.myvibe.life/>

MyVibe.life is a platform I created for a client where user can accomplish various tasks like play some games and fill some surveys to gain Bam coins they can exchange for gifts and prizes. There is also an instagram like section with an infinite-scroll feed of videos and photos posted by the users.

The platform is built on rails/stimulus. With a turbolinks ios app.

### Intranets

I created a few intranets to handle internal process for various clients.

- Railway and crossings inspection management system. Dealing with scheduling of inspections and resulting reports for Transport Canada. - [Xrail](http://xrail.com/).
- HR management system for a Montreal MSP to help with payrolls, vacations, client retainers, etc. - [GroupeSL](https://www.groupesl.com/en/)
- Factory visitor logbook and credentials management system - [Lerclerc](https://leclerc.ca/)

### Qidigo

<https://www.qidigo.com/login>

The application is a market place for cities and various community centers to sell their activities and courses like yoga or swimming class. It was dealing with registration, list of attendees, payments, tax deduction reports for the users and organizations, etc.

At first, we were mandated with writing a few functionality like search using algolia and various reports. Over time our mandate grew and ended up acting as outside consultant and CTO to help their team fix their tech debt issues and oversee the app rewrite. The app had been started by non-coders and interns and needed some serious structural changes for which the client retained our services for around to 2 years.


### White label projects

I worked on white label projects for various agencies. As per the contract I cannot disclosed the end client, but here is some example of projects we worked on.

- An iOS and android app to help a nationwide business train their sales rep in a gamified fahsion through quiz, points and prizes.
- A trivia game with prizes for one of the biggest union in Canada
- We wrote the checkout flow and fixed various tech debt issues on an ecommerce site for a business selling niche accessories grossing in the 7 to 8 figures every year.

## Games and tool

### Games

I worked on a variety of games some for Berzerk Studio, some just for fun (game jams) and some for clients (white label).
Here is some of them:

- [Berzerk Ball 2 - Mobile port](https://www.youtube.com/watch?v=SAt04zu03Ek)
- [Berzerk Ball 1 - Japanese port](https://www.youtube.com/watch?v=fMzP_M7IF2s)
- [Peacekeeper](https://www.youtube.com/watch?v=Mv5WpDjxcS4)
- [Sand of coliseum - Monster update](https://www.youtube.com/watch?v=yxMBiI9tSHw)


### BaconBox

BaconBox was an open source game engine I started with partners. Freshly out of college, we were overenginnering things and slowly discovering anti-patterns. It went through 3 rewrites. The sources were previously hosted with mercurial, so some of the older code might have been lost.

In the end the engine was a Component-based engine. Similar to how [Unity](https://unity.com/) works.

The input/output and scripting layer were interchangeable. The games could be coded in Lua, C/C++ and some experiments were made with ruby.

The engine was rendering to standard low level rendering APIs like OpenGL, Stage3D and eventually would have also supported DirectX. But was also able to render to more divergent rendering backend, like the vector based api of the Flash runtime. [We also toyed with rendering to CLI.](http://caca.zoy.org/wiki/libcaca)

The engine allowed us to use the same codebase to port the flash games to mobile. Modifying only the assets.

We were also able to live reload code on iOS/android instead of going through the 20 minutes-long build time we were experiencing with unity, allowing us to iterate quickly.

Sources:

- <https://github.com/anhero/BaconBox>
- <https://github.com/anhero/BaconBox-OLD>
- <https://github.com/anhero/BaconBoxApp-OLD>



#### BaconBox Flash Exporter

The Flash exporter was the tooling allowing us to transform complex flash animations to sprite map and xml the engine could use to render outside of flash.

One of the big reason we were using flash animations was the ability to nest components together, name frame/framesets, name components. This allowed to do things like drawing the hitzone or put an invisible dot on the end of a rifle to get it's position at run time to spawn the bullets.

Today most engine support this concept. Unity and Unreal Engine do this through their inhouse editor. As a small studio we leveraged existing tools (at the time) to do the same. The exporter I coded allowed us to extract this information from flash.


Sources: <https://github.com/anhero/BaconBoxFlashExporter>


### Generous

Generous was a "cross-platform/ide project builder generator" (what a mouthful). We were using it to generate Xcode Project, QtCreator Project, Makefiles or just plain dumb script to build our engine and games on all our target platforms.

It was like autoconf, but supporting multiple "project" types, not just makefiles.

Project using Generous would be configured using yaml like this: [BaconBox Generous project](https://github.com/anhero/BaconBox/blob/develop/generous.project), with possibility of using a ruby DSL.

Sources: <https://github.com/anhero/generous>

### LibBuildTool

Libbuildtool was initially coded in bash and got rewritten in ruby. It was a way for us to build/download/prep the dependencies of a project.
It was a little bit like nix packages expressions (but using a ruby DSL) allowing us to use predefined builders to easily describe how the build should go. We could overwrite any step of the process through hooks, if we needed to patch the sources before building for example.

It supported cross compilation and various build system like CMAKE, Autoconf, etc. and

Here is the main libbuildtool file for BaconBox telling libbuildtool what libraries needs to be built for the selected platform: <https://github.com/anhero/BaconBox/blob/develop/libraries/libraries.rb>

Here is an example of the DSL needed to build libpng: <https://github.com/anhero/BaconBox/blob/develop/libraries/libpng.desc>



Sources: <https://github.com/anhero/libbuildtool>

### Crossbridge

I did not code CrossBridge (formerly alchemy and Flascc). CrossBridge was a C/C++ cross compiler for the ActionScript VM (Flash). Adobe abandonned it and we took it over with other contributors. We were trying to keep it alive by maintaining the documentation, forum, etc.

We also added new modules and functionallity like the ability to load assets without precompiling them into the Flash bundle:

<https://github.com/anhero/flascc-URLLoaderVFS/blob/develop/URLLoaderVFS.as>
